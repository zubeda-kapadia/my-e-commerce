define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/plugin_platform_interface/plugin_platform_interface.dart'], (function load__packages__file_picker_platform_interface__method_channel_file_picker_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation__debug$46dart, packages__plugin_platform_interface__plugin_platform_interface$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const plugin_platform_interface = packages__plugin_platform_interface__plugin_platform_interface$46dart.plugin_platform_interface;
  var method_channel_file_picker = Object.create(dart.library);
  var file_picker_platform_interface = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    PlatformExceptionL: () => (T.PlatformExceptionL = dart.constFn(dart.legacy(message_codec.PlatformException)))(),
    dynamicTodynamic: () => (T.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    ObjectL: () => (T.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    IdentityMapOfStringL$ObjectL: () => (T.IdentityMapOfStringL$ObjectL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ObjectL())))(),
    LinkedHashMapOfStringL$StringL: () => (T.LinkedHashMapOfStringL$StringL = dart.constFn(collection.LinkedHashMap$(T.StringL(), T.StringL())))(),
    dynamicToStringL: () => (T.dynamicToStringL = dart.constFn(dart.fnType(T.StringL(), [dart.dynamic])))(),
    FileTypeL: () => (T.FileTypeL = dart.constFn(dart.legacy(file_picker_platform_interface.FileType)))(),
    FilePickerStatusL: () => (T.FilePickerStatusL = dart.constFn(dart.legacy(file_picker_platform_interface.FilePickerStatus)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: file_picker_platform_interface.FileType.prototype,
        [_name$]: "FileType.any",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[3] || CT.C3
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "miguelruivo.flutter.plugins.filepicker"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: platform_channel.EventChannel.prototype,
        [EventChannel__binaryMessenger]: null,
        [EventChannel_codec]: C[2] || CT.C2,
        [EventChannel_name]: "miguelruivo.flutter.plugins.filepickerevent"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: file_picker_platform_interface.FileType.prototype,
        [_name$]: "FileType.media",
        index: 1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: file_picker_platform_interface.FileType.prototype,
        [_name$]: "FileType.image",
        index: 2
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: file_picker_platform_interface.FileType.prototype,
        [_name$]: "FileType.video",
        index: 3
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: file_picker_platform_interface.FileType.prototype,
        [_name$]: "FileType.audio",
        index: 4
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: file_picker_platform_interface.FileType.prototype,
        [_name$]: "FileType.custom",
        index: 5
      });
    },
    get C10() {
      return C[10] = dart.constList([C[0] || CT.C0, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9], T.FileTypeL());
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: file_picker_platform_interface.FilePickerStatus.prototype,
        [_name$]: "FilePickerStatus.picking",
        index: 0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: file_picker_platform_interface.FilePickerStatus.prototype,
        [_name$]: "FilePickerStatus.done",
        index: 1
      });
    },
    get C13() {
      return C[13] = dart.constList([C[11] || CT.C11, C[12] || CT.C12], T.FilePickerStatusL());
    }
  }, false);
  var C = Array(14).fill(void 0);
  var I = [
    "package:file_picker_platform_interface/file_picker_platform_interface.dart",
    "package:file_picker_platform_interface/method_channel_file_picker.dart"
  ];
  var _name$ = dart.privateName(file_picker_platform_interface, "_name");
  var _getPath = dart.privateName(method_channel_file_picker, "_getPath");
  file_picker_platform_interface.FilePickerPlatform = class FilePickerPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return file_picker_platform_interface.FilePickerPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, file_picker_platform_interface.FilePickerPlatform._token);
      file_picker_platform_interface.FilePickerPlatform._instance = instance;
    }
    getFiles(opts) {
      let type = opts && 'type' in opts ? opts.type : C[0] || CT.C0;
      let allowedExtensions = opts && 'allowedExtensions' in opts ? opts.allowedExtensions : null;
      let allowMultiple = opts && 'allowMultiple' in opts ? opts.allowMultiple : false;
      let onFileLoading = opts && 'onFileLoading' in opts ? opts.onFileLoading : null;
      return async.async(dart.dynamic, function* getFiles() {
        return dart.throw(new core.UnimplementedError.new("getFiles() has not been implemented."));
      });
    }
    clearTemporaryFiles() {
      return async.async(T.boolL(), function* clearTemporaryFiles() {
        return dart.throw(new core.UnimplementedError.new("clearTemporaryFiles() has not been implemented."));
      });
    }
    getDirectoryPath() {
      return async.async(T.StringL(), function* getDirectoryPath() {
        return dart.throw(new core.UnimplementedError.new("getDirectoryPath() has not been implemented."));
      });
    }
  };
  (file_picker_platform_interface.FilePickerPlatform.new = function() {
    file_picker_platform_interface.FilePickerPlatform.__proto__.new.call(this, {token: file_picker_platform_interface.FilePickerPlatform._token});
    ;
  }).prototype = file_picker_platform_interface.FilePickerPlatform.prototype;
  dart.addTypeTests(file_picker_platform_interface.FilePickerPlatform);
  dart.addTypeCaches(file_picker_platform_interface.FilePickerPlatform);
  dart.setMethodSignature(file_picker_platform_interface.FilePickerPlatform, () => ({
    __proto__: dart.getMethods(file_picker_platform_interface.FilePickerPlatform.__proto__),
    getFiles: dart.fnType(dart.legacy(async.Future), [], {allowMultiple: dart.legacy(core.bool), allowedExtensions: dart.legacy(core.List$(dart.legacy(core.String))), onFileLoading: dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(file_picker_platform_interface.FilePickerStatus)])), type: dart.legacy(file_picker_platform_interface.FileType)}, {}),
    clearTemporaryFiles: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    getDirectoryPath: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [])
  }));
  dart.setLibraryUri(file_picker_platform_interface.FilePickerPlatform, I[0]);
  dart.defineLazy(file_picker_platform_interface.FilePickerPlatform, {
    /*file_picker_platform_interface.FilePickerPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*file_picker_platform_interface.FilePickerPlatform._instance*/get _instance() {
      return new method_channel_file_picker.MethodChannelFilePicker.new();
    },
    set _instance(_) {}
  }, true);
  method_channel_file_picker.MethodChannelFilePicker = class MethodChannelFilePicker extends file_picker_platform_interface.FilePickerPlatform {
    getFiles(opts) {
      let type = opts && 'type' in opts ? opts.type : C[0] || CT.C0;
      let allowedExtensions = opts && 'allowedExtensions' in opts ? opts.allowedExtensions : null;
      let allowMultiple = opts && 'allowMultiple' in opts ? opts.allowMultiple : false;
      let allowCompression = opts && 'allowCompression' in opts ? opts.allowCompression : true;
      let onFileLoading = opts && 'onFileLoading' in opts ? opts.onFileLoading : null;
      return this[_getPath](type, allowMultiple, allowCompression, allowedExtensions, onFileLoading);
    }
    clearTemporaryFiles() {
      return async.async(T.boolL(), function* clearTemporaryFiles() {
        return method_channel_file_picker._channel.invokeMethod(T.boolL(), "clear");
      });
    }
    getDirectoryPath() {
      return async.async(T.StringL(), function* getDirectoryPath() {
        try {
          return yield method_channel_file_picker._channel.invokeMethod(T.StringL(), "dir");
        } catch (e) {
          let ex = dart.getThrown(e);
          if (T.PlatformExceptionL().is(ex)) {
            if (ex.code === "unknown_path") {
              core.print("[" + "MethodChannelFilePicker" + "] Could not resolve directory path. Maybe it's a protected one or unsupported (such as Downloads folder). If you are on Android, make sure that you are on SDK 21 or above.");
            }
            return null;
          } else
            throw e;
        }
      });
    }
    [_getPath](fileType, allowMultipleSelection, allowCompression, allowedExtensions, onFileLoading) {
      return async.async(dart.dynamic, function* _getPath() {
        let t1, t1$, t1$0;
        let type = diagnostics.describeEnum(fileType);
        if (type !== "custom" && dart.test((t1$ = (t1 = allowedExtensions, t1 == null ? null : t1[$isNotEmpty]), t1$ == null ? false : t1$))) {
          dart.throw(core.Exception.new("If you are using a custom extension filter, please use the FileType.custom instead."));
        }
        try {
          t1$0 = method_channel_file_picker.MethodChannelFilePicker._eventSubscription;
          t1$0 == null ? null : t1$0.cancel();
          if (onFileLoading != null) {
            method_channel_file_picker.MethodChannelFilePicker._eventSubscription = method_channel_file_picker._eventChannel.receiveBroadcastStream().listen(dart.fn(data => onFileLoading(dart.test(T.boolL().as(data)) ? file_picker_platform_interface.FilePickerStatus.picking : file_picker_platform_interface.FilePickerStatus.done), T.dynamicTodynamic()), {onError: dart.fn(error => dart.throw(core.Exception.new(error)), T.dynamicToNull())});
          }
          let result = (yield method_channel_file_picker._channel.invokeMethod(dart.dynamic, type, new (T.IdentityMapOfStringL$ObjectL()).from(["allowMultipleSelection", allowMultipleSelection, "allowedExtensions", allowedExtensions, "allowCompression", allowCompression])));
          if (result != null && dart.test(allowMultipleSelection)) {
            if (T.StringL().is(result)) {
              result = [result];
            }
            return T.LinkedHashMapOfStringL$StringL().fromIterable(core.Iterable.as(result), {key: dart.fn(path => T.StringL().as(dart.dload(dart.dsend(path, 'split', ["/"]), 'last')), T.dynamicToStringL()), value: dart.fn(path => T.StringL().as(path), T.dynamicToStringL())});
          }
          return result;
        } catch (e$) {
          let ex = dart.getThrown(e$);
          if (T.PlatformExceptionL().is(ex)) {
            let e = ex;
            core.print("[" + "MethodChannelFilePicker" + "] Platform exception: " + dart.str(e));
            dart.rethrow(e$);
          } else {
            let e = ex;
            core.print("[" + "MethodChannelFilePicker" + "] Unsupported operation. Method not found. The exception thrown was: " + dart.str(e));
            dart.rethrow(e$);
          }
        }
      });
    }
  };
  (method_channel_file_picker.MethodChannelFilePicker.new = function() {
    method_channel_file_picker.MethodChannelFilePicker.__proto__.new.call(this);
    ;
  }).prototype = method_channel_file_picker.MethodChannelFilePicker.prototype;
  dart.addTypeTests(method_channel_file_picker.MethodChannelFilePicker);
  dart.addTypeCaches(method_channel_file_picker.MethodChannelFilePicker);
  dart.setMethodSignature(method_channel_file_picker.MethodChannelFilePicker, () => ({
    __proto__: dart.getMethods(method_channel_file_picker.MethodChannelFilePicker.__proto__),
    getFiles: dart.fnType(dart.legacy(async.Future), [], {allowCompression: dart.legacy(core.bool), allowMultiple: dart.legacy(core.bool), allowedExtensions: dart.legacy(core.List$(dart.legacy(core.String))), onFileLoading: dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(file_picker_platform_interface.FilePickerStatus)])), type: dart.legacy(file_picker_platform_interface.FileType)}, {}),
    [_getPath]: dart.fnType(dart.legacy(async.Future), [dart.legacy(file_picker_platform_interface.FileType), dart.legacy(core.bool), dart.legacy(core.bool), dart.legacy(core.List$(dart.legacy(core.String))), dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(file_picker_platform_interface.FilePickerStatus)]))])
  }));
  dart.setLibraryUri(method_channel_file_picker.MethodChannelFilePicker, I[1]);
  dart.defineLazy(method_channel_file_picker.MethodChannelFilePicker, {
    /*method_channel_file_picker.MethodChannelFilePicker._tag*/get _tag() {
      return "MethodChannelFilePicker";
    },
    /*method_channel_file_picker.MethodChannelFilePicker._eventSubscription*/get _eventSubscription() {
      return null;
    },
    set _eventSubscription(_) {}
  }, true);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  var EventChannel__binaryMessenger = dart.privateName(platform_channel, "EventChannel._binaryMessenger");
  var EventChannel_codec = dart.privateName(platform_channel, "EventChannel.codec");
  var EventChannel_name = dart.privateName(platform_channel, "EventChannel.name");
  dart.defineLazy(method_channel_file_picker, {
    /*method_channel_file_picker._channel*/get _channel() {
      return C[1] || CT.C1;
    },
    /*method_channel_file_picker._eventChannel*/get _eventChannel() {
      return C[4] || CT.C4;
    }
  }, true);
  file_picker_platform_interface.FileType = class FileType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (file_picker_platform_interface.FileType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = file_picker_platform_interface.FileType.prototype;
  dart.addTypeTests(file_picker_platform_interface.FileType);
  dart.addTypeCaches(file_picker_platform_interface.FileType);
  dart.setMethodSignature(file_picker_platform_interface.FileType, () => ({
    __proto__: dart.getMethods(file_picker_platform_interface.FileType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(file_picker_platform_interface.FileType, I[0]);
  dart.setFieldSignature(file_picker_platform_interface.FileType, () => ({
    __proto__: dart.getFields(file_picker_platform_interface.FileType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(file_picker_platform_interface.FileType, ['toString']);
  file_picker_platform_interface.FileType.any = C[0] || CT.C0;
  file_picker_platform_interface.FileType.media = C[5] || CT.C5;
  file_picker_platform_interface.FileType.image = C[6] || CT.C6;
  file_picker_platform_interface.FileType.video = C[7] || CT.C7;
  file_picker_platform_interface.FileType.audio = C[8] || CT.C8;
  file_picker_platform_interface.FileType.custom = C[9] || CT.C9;
  file_picker_platform_interface.FileType.values = C[10] || CT.C10;
  file_picker_platform_interface.FilePickerStatus = class FilePickerStatus extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (file_picker_platform_interface.FilePickerStatus.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = file_picker_platform_interface.FilePickerStatus.prototype;
  dart.addTypeTests(file_picker_platform_interface.FilePickerStatus);
  dart.addTypeCaches(file_picker_platform_interface.FilePickerStatus);
  dart.setMethodSignature(file_picker_platform_interface.FilePickerStatus, () => ({
    __proto__: dart.getMethods(file_picker_platform_interface.FilePickerStatus.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(file_picker_platform_interface.FilePickerStatus, I[0]);
  dart.setFieldSignature(file_picker_platform_interface.FilePickerStatus, () => ({
    __proto__: dart.getFields(file_picker_platform_interface.FilePickerStatus.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(file_picker_platform_interface.FilePickerStatus, ['toString']);
  file_picker_platform_interface.FilePickerStatus.picking = C[11] || CT.C11;
  file_picker_platform_interface.FilePickerStatus.done = C[12] || CT.C12;
  file_picker_platform_interface.FilePickerStatus.values = C[13] || CT.C13;
  dart.trackLibraries("packages/file_picker_platform_interface/method_channel_file_picker.dart", {
    "package:file_picker_platform_interface/method_channel_file_picker.dart": method_channel_file_picker,
    "package:file_picker_platform_interface/file_picker_platform_interface.dart": file_picker_platform_interface
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["file_picker_platform_interface.dart","method_channel_file_picker.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiC4C;IAAS;wBAEZ;AACU,MAA7B,wDAAY,QAAQ,EAAE;AACpB,MAApB,8DAAY,QAAQ;IACtB;;UAeW;UACI;UACR;UACsB;AAJL;AAMpB,0BAAM,gCAAmB;MAAuC;;;AASpC;AAAY,0BAAM,gCAC9C;MAAkD;;;AAMvB;AAC3B,0BAAM,gCAAmB;MAA+C;;;;AAhDrD,uFAAa;;EAAO;;;;;;;;;;;MAEvB,wDAAM;YAAG;;MAEH,2DAAS;YAAG;;;;;;UCZ3B;UACI;UACR;UACA;UACsB;AAEzB,4BAAS,IAAI,EAAE,aAAa,EAAE,gBAAgB,EAAE,iBAAiB,EAC7D,aAAa;IAAC;;AAGU;AAC5B,cAAA,AAAS,6DAAmB;MAAQ;;;AAGT;AAC7B;AACE,gBAAO,OAAM,AAAS,8DAAa;;cACP;AAA5B;AACA,gBAAI,AAAG,AAAK,EAAN,UAAS;AAE4K,cADzL,WACI,AAAoL,kCAA7K;;AAEb,kBAAO;;;;MAEX;;eAGW,UACJ,wBACA,kBACQ,mBACc;AALL;;AAOT,mBAAO,yBAAa,QAAQ;AACzC,YAAI,AAAK,IAAD,KAAI,uBAA2C,YAA9B,iBAAiB,eAAjB,OAAmB,kBAAnB,cAAiC;AAEkC,UAD1F,WAAM,mBACF;;AAEN;AAC8B,iBAA5B;gCAAoB;AACpB,cAAI,AAAc,aAAD;AAMV,YALL,wEAAqB,AAAc,AAAyB,yEACtD,QAAC,QAAS,AAAa,aAAA,WAAO,aAAL,IAAI,KACN,0DACA,wFACd,QAAC,SAAU,WAAM,mBAAU,KAAK;;AAIzC,wBAAS,MAAM,AAAS,+DAAa,IAAI,EAAE,6CACjD,0BAA0B,sBAAsB,EAChD,qBAAqB,iBAAiB,EACtC,oBAAoB,gBAAgB;AAEtC,cAAI,AAAO,MAAD,sBAAY,sBAAsB;AAC1C,gBAAW,eAAP,MAAM;AACS,cAAjB,SAAS,CAAC,MAAM;;AAElB,kBAAO,kEAAiC,MAAM,SACrC,QAAC,QAAS,eAAgB,WAAX,WAAL,IAAI,YAAO,+CAAkB,QAAC,uBAAS,IAAI;;AAEhE,gBAAO,OAAM;;;AACb;gBAA4B;AACW,YAAvC,WAAM,AAAgC,kCAAzB,oCAAuB,CAAC;AAC9B,YAAP;;gBACO;AAE6E,YADpF,WACI,AAA+E,kCAAxE,mFAAsE,CAAC;AAC3E,YAAP;;;MAEJ;;;;;;EACF;;;;;;;;;;MA5EsB,uDAAI;;;MACE,qEAAkB;;;;;;;;;;;;;MAR1B,mCAAQ;;;MAET,wCAAa;;;;;;;IDEhC;;iEAPK;;;;EAOL;;;;;;;;;;;;;;;;;;;;;;;;;IAKA;;yEAHK;;;;EAGL","file":"../../../../../../packages/file_picker_platform_interface/method_channel_file_picker.dart.lib.js"}');
  // Exports:
  return {
    method_channel_file_picker: method_channel_file_picker,
    file_picker_platform_interface: file_picker_platform_interface
  };
}));

//# sourceMappingURL=method_channel_file_picker.dart.lib.js.map
